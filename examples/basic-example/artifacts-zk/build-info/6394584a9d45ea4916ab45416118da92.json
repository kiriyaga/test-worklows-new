{"id":"6394584a9d45ea4916ab45416118da92","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16-1.0.0","input":{"language":"Solidity","sources":{"contracts/001_deploy/Greeter.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\ncontract Greeter {\n    string greeting;\n    constructor(string memory _greeting) {\n        greeting = _greeting;\n    }\n\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n    function setGreeting(string memory _greeting) public {\n        greeting = _greeting;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.16","long_version":"0.8.16+commit.1aa01404.Linux.g++","zk_version":"1.3.19","sources":{"contracts/001_deploy/Greeter.sol":{"id":0,"ast":{"absolutePath":"contracts/001_deploy/Greeter.sol","exportedSymbols":{"Greeter":[33]},"id":34,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:0"},{"id":2,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"57:19:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Greeter","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":33,"linearizedBaseContracts":[33],"name":"Greeter","nameLocation":"87:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4,"mutability":"mutable","name":"greeting","nameLocation":"108:8:0","nodeType":"VariableDeclaration","scope":33,"src":"101:15:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3,"name":"string","nodeType":"ElementaryTypeName","src":"101:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"body":{"id":13,"nodeType":"Block","src":"159:37:0","statements":[{"expression":{"id":11,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9,"name":"greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"169:8:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":10,"name":"_greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"180:9:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"169:20:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":12,"nodeType":"ExpressionStatement","src":"169:20:0"}]},"id":14,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6,"mutability":"mutable","name":"_greeting","nameLocation":"148:9:0","nodeType":"VariableDeclaration","scope":14,"src":"134:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5,"name":"string","nodeType":"ElementaryTypeName","src":"134:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"133:25:0"},"returnParameters":{"id":8,"nodeType":"ParameterList","parameters":[],"src":"159:0:0"},"scope":33,"src":"122:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":21,"nodeType":"Block","src":"255:32:0","statements":[{"expression":{"id":19,"name":"greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"272:8:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":18,"id":20,"nodeType":"Return","src":"265:15:0"}]},"functionSelector":"cfae3217","id":22,"implemented":true,"kind":"function","modifiers":[],"name":"greet","nameLocation":"211:5:0","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"216:2:0"},"returnParameters":{"id":18,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":22,"src":"240:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":16,"name":"string","nodeType":"ElementaryTypeName","src":"240:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"239:15:0"},"scope":33,"src":"202:85:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":31,"nodeType":"Block","src":"346:37:0","statements":[{"expression":{"id":29,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":27,"name":"greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"356:8:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":28,"name":"_greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"367:9:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"356:20:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":30,"nodeType":"ExpressionStatement","src":"356:20:0"}]},"functionSelector":"a4136862","id":32,"implemented":true,"kind":"function","modifiers":[],"name":"setGreeting","nameLocation":"302:11:0","nodeType":"FunctionDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"_greeting","nameLocation":"328:9:0","nodeType":"VariableDeclaration","scope":32,"src":"314:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":23,"name":"string","nodeType":"ElementaryTypeName","src":"314:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"313:25:0"},"returnParameters":{"id":26,"nodeType":"ParameterList","parameters":[],"src":"346:0:0"},"scope":33,"src":"293:90:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":34,"src":"78:307:0","usedErrors":[]}],"src":"33:353:0"}}},"contracts":{"contracts/001_deploy/Greeter.sol":{"Greeter":{"abi":[{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greet","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.1aa01404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"name\":\"setGreeting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/001_deploy/Greeter.sol\":\"Greeter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/001_deploy/Greeter.sol\":{\"keccak256\":\"0x85518b25f93cb1a17f3e536500dc5d26df1c513c207e71561e09f2183793251d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83d03e9960d22ff8ff6ca45aa0480200f1f6db1ff140c7400f59356a71f84935\",\"dweb:/ipfs/QmWrVkVFqedtYLTmi2w6W7AiwmBLriMubEskpLoyjdzhHY\"]}},\"version\":1}","zk_version":"1.3.19"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Greeter.sol:Greeter\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[5]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.eq\t@.BB0_72\n\tsub.s!\t@CPI0_8[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_4[0], r5, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r2\n\tadd\t@CPI0_12[0], r0, r4\n\tsub!\tr2, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI0_12[0], r2, r2\n\tsub!\tr2, r0, r7\n\tadd.ge\tr0, r0, r4\n\tsub.s!\t@CPI0_12[0], r2, r2\n\tadd.ne\tr6, r0, r4\n\tsub!\tr4, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_4[0], r4, r2\n\tjump.gt\t@.BB0_4\n\tadd\t191, r4, r7\n\tsub.s\t32, r0, r2\n\tand\tr7, r2, r7\n\tsub.s!\t@CPI0_4[0], r7, r8\n\tjump.gt\t@.BB0_4\n\tst.1\t64, r7\n\tst.1\t128, r4\n\tadd\tr5, r4, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r6, r3\n\tptr.add\tr1, r3, r1\n\tand\t31, r4, r3\n\tshr.s!\t5, r4, r5\n\tjump.eq\t@.BB0_85\n\tadd\tr0, r0, r6\n.BB0_52:\n\tshl.s\t5, r6, r7\n\tptr.add\tr1, r7, r8\n\tld\tr8, r8\n\tadd\t160, r7, r7\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_52\n.BB0_85:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_54\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tshl.s\t3, r3, r3\n\tadd\t160, r5, r5\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_54:\n\tadd\t160, r4, r1\n\tst.1\tr1, r0\n\tld.1\t128, r1\n\tsub.s!\t@CPI0_4[0], r1, r3\n\tjump.gt\t@.BB0_4\n\tsload\tr0, r4\n\tand!\t1, r4, r3\n\tshr.s\t1, r4, r5\n\tand\t127, r5, r3\n\tadd.ne\tr5, r0, r3\n\tsub.s!\t31, r3, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr4, r5, r4\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_22\n\tsub.s!\t32, r3, r4\n\tjump.lt\t@.BB0_59\n\tadd\t31, r1, r4\n\tshr.s\t5, r4, r4\n\tadd\t@CPI0_9[0], r4, r5\n\tadd\t@CPI0_9[0], r0, r4\n\tsub.s!\t32, r1, r6\n\tadd.ge\tr5, r0, r4\n\tst.1\t0, r0\n\tadd\t31, r3, r3\n\tshr.s\t5, r3, r3\n\tadd\t@CPI0_9[0], r3, r3\n\tsub!\tr4, r3, r5\n\tjump.ge\t@.BB0_59\n.BB0_60:\n\tsstore\tr4, r0\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_60\n.BB0_59:\n\tsub.s!\t31, r1, r3\n\tjump.le\t@.BB0_69\n\tand!\tr1, r2, r3\n\tadd\t160, r0, r4\n\tadd\t@CPI0_9[0], r0, r2\n\tst.1\t0, r0\n\tjump.eq\t@.BB0_66\n\tadd\t@CPI0_9[0], r0, r2\n\tadd\t32, r0, r6\n\tadd\tr0, r0, r4\n.BB0_64:\n\tadd\tr6, r0, r5\n\tadd\t128, r5, r6\n\tld.1\tr6, r6\n\tsstore\tr2, r6\n\tadd\t32, r5, r6\n\tadd\t1, r2, r2\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r7\n\tjump.lt\t@.BB0_64\n\tadd\t160, r5, r4\n.BB0_66:\n\tsub!\tr3, r1, r3\n\tjump.ge\t@.BB0_68\n\tshl.s\t3, r1, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r5\n\tshr\tr5, r3, r3\n\txor\tr3, r5, r3\n\tld.1\tr4, r4\n\tand\tr4, r3, r3\n\tsstore\tr2, r3\n.BB0_68:\n\tadd\t1, r0, r2\n\tshl.s\t1, r1, r3\n\tjump\t@.BB0_61\n.BB0_1:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_1[0], r3, r2\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_6\n.BB0_4:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB0_5:\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_6:\n\tadd\t159, r3, r2\n\tand\t@CPI0_3[0], r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_86\n\tadd\tr0, r0, r5\n.BB0_8:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_8\n.BB0_86:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_10\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_10:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_2\n\tld.1\t128, r4\n\tsub.s!\t@CPI0_4[0], r4, r1\n\tjump.gt\t@.BB0_2\n\tadd\t128, r3, r3\n\tadd\t159, r4, r1\n\tsub!\tr1, r3, r1\n\tjump.ge\t@.BB0_2\n\tadd\t128, r4, r2\n\tld.1\tr2, r1\n\tsub.s!\t@CPI0_4[0], r1, r5\n\tjump.gt\t@.BB0_4\n\tadd\t63, r1, r5\n\tsub.s\t32, r0, r9\n\tand\tr5, r9, r5\n\tld.1\t64, r8\n\tadd\tr8, r5, r5\n\tsub!\tr5, r8, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_4[0], r5, r7\n\tjump.gt\t@.BB0_4\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r5\n\tst.1.inc\tr8, r1, r6\n\tadd\tr4, r1, r4\n\tadd\t160, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.gt\t@.BB0_2\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_20\n\tadd\tr0, r0, r3\n.BB0_19:\n\tadd\tr3, r6, r4\n\tadd\t32, r3, r3\n\tadd\tr3, r2, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_19\n.BB0_20:\n\tadd\tr6, r1, r1\n\tst.1\tr1, r0\n\tld.1\tr8, r4\n\tsub.s!\t@CPI0_4[0], r4, r1\n\tjump.gt\t@.BB0_4\n\tsload\tr0, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_22\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_27\n\tadd\tr3, r0, stack-[1]\n\tadd\tr4, r0, stack-[3]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr8, r0, stack-[5]\n\tadd\tr9, r0, stack-[4]\n\tadd\tr6, r0, stack-[2]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r6\n\tadd\tstack-[4], r0, r9\n\tadd\tstack-[5], r0, r8\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r4\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r4, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_27\n.BB0_28:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_28\n.BB0_27:\n\tsub.s!\t31, r4, r1\n\tjump.le\t@.BB0_37\n\tadd\tr4, r0, stack-[3]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr8, r0, stack-[5]\n\tadd\tr9, r0, stack-[4]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r3\n\tadd\tstack-[5], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r7\n\tand!\tr7, r3, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tjump.eq\t@.BB0_34\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_33:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_33\n.BB0_34:\n\tsub!\tr3, r7, r3\n\tjump.ge\t@.BB0_36\n\tshl.s\t3, r7, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r6, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_36:\n\tadd\t1, r0, r1\n\tshl.s\t1, r7, r2\n\tjump\t@.BB0_29\n.BB0_72:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand!\t1, r1, r3\n\tshr.s\t1, r1, r4\n\tand\t127, r4, r2\n\tadd.ne\tr4, r0, r2\n\tsub.s!\t31, r2, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\txor\tr1, r4, r4\n\tand!\t1, r4, r4\n\tjump.eq\t@.BB0_74\n.BB0_22:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB0_5\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_74:\n\tst.1\t128, r2\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_78\n\tadd\t160, r0, r1\n\tst.1\t0, r0\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_76\n\tadd\t@CPI0_9[0], r0, r1\n\tadd\tr0, r0, r4\n.BB0_81:\n\tadd\tr4, r0, r3\n\tsload\tr1, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_81\n\tadd\t192, r3, r1\n\tjump\t@.BB0_75\n.BB0_78:\n\tsub.s\t256, r0, r3\n\tand\tr1, r3, r1\n\tst.1\t160, r1\n\tsub!\tr2, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_75:\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t@CPI0_10[0], r1, r2\n\tsub.s!\t@CPI0_11[0], r2, r2\n\tjump.lt\t@.BB0_4\n.BB0_76:\n\tst.1\t64, r1\n\tadd\t32, r0, r2\n\tst.1.inc\tr1, r2, r3\n\tld.1\t128, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r3\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB0_84\n\tadd\tr0, r0, r4\n.BB0_83:\n\tadd\tr4, r3, r5\n\tadd\t160, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_83\n.BB0_84:\n\tadd\tr2, r3, r3\n\tst.1\tr3, r0\n\tadd\t95, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_69:\n\tsub!\tr1, r0, r2\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_71\n\tld.1\t160, r2\n.BB0_71:\n\tshl.s\t3, r1, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tand\tr2, r3, r3\n\tshl.s\t1, r1, r2\n.BB0_61:\n\tor\tr3, r2, r1\n\tsstore\tr0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_37:\n\tsub!\tr4, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_39\n\tld.1\tr6, r1\n.BB0_39:\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n.BB0_29:\n\tor\tr2, r1, r1\n\tsstore\tr0, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_6[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__staticcall:\n.func_begin1:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell -18446744073709551457\nCPI0_2:\n\t.cell -18446744073709551489\nCPI0_3:\n\t.cell 8589934560\nCPI0_4:\n\t.cell 18446744073709551615\nCPI0_5:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_6:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_7:\n\t.cell 3484299799\nCPI0_8:\n\t.cell 2752735330\nCPI0_9:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_10:\n\t.cell -18446744073709551616\nCPI0_11:\n\t.cell -18446744073709551488\nCPI0_12:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_13:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_14:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":""},"methodIdentifiers":{"greet()":"cfae3217","setGreeting(string)":"a4136862"}},"irOptimized":"/// @use-src 0:\"contracts/001_deploy/Greeter.sol\"\nobject \"Greeter_33\" {\n    code {\n        {\n            /// @src 0:78:385  \"contract Greeter {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"Greeter_33\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            let _2 := 32\n            if slt(sub(_1, memoryDataOffset), _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:78:385  \"contract Greeter {...\"\n            let offset := mload(memoryDataOffset)\n            let _3 := sub(shl(64, 1), 1)\n            if gt(offset, _3)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:78:385  \"contract Greeter {...\"\n            let _4 := add(memoryDataOffset, offset)\n            let _5 := 0x1f\n            if iszero(slt(add(_4, _5), _1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:78:385  \"contract Greeter {...\"\n            let _6 := mload(_4)\n            if gt(_6, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ 0x24)\n            }\n            let _7 := not(31)\n            let array := allocate_memory(add(and(add(_6, _5), _7), _2))\n            mstore(array, _6)\n            if gt(add(add(_4, _6), _2), _1)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:78:385  \"contract Greeter {...\"\n            let i := /** @src -1:-1:-1 */ 0\n            /// @src 0:78:385  \"contract Greeter {...\"\n            for { } lt(i, _6) { i := add(i, _2) }\n            {\n                mstore(add(add(array, i), _2), mload(add(add(_4, i), _2)))\n            }\n            mstore(add(add(array, _6), _2), /** @src -1:-1:-1 */ 0)\n            /// @src 0:78:385  \"contract Greeter {...\"\n            let newLen := mload(array)\n            if gt(newLen, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ 0x24)\n            }\n            let _8 := sload(/** @src -1:-1:-1 */ 0)\n            /// @src 0:78:385  \"contract Greeter {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 0:78:385  \"contract Greeter {...\"\n            let _9 := 1\n            length := shr(_9, _8)\n            let outOfPlaceEncoding := and(_8, _9)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, _2))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ 0x24)\n            }\n            if gt(length, _5)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 0:78:385  \"contract Greeter {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ _2)\n                let deleteStart := add(data, shr(5, add(newLen, _5)))\n                if lt(newLen, _2) { deleteStart := data }\n                let _10 := add(data, shr(5, add(length, _5)))\n                let start := deleteStart\n                for { } lt(start, _10) { start := add(start, _9) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 0:78:385  \"contract Greeter {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 0:78:385  \"contract Greeter {...\"\n            srcOffset := _2\n            switch gt(newLen, _5)\n            case 1 {\n                let loopEnd := and(newLen, _7)\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 0:78:385  \"contract Greeter {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ _2)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 0:78:385  \"contract Greeter {...\"\n                for { } lt(i_1, loopEnd) { i_1 := add(i_1, _2) }\n                {\n                    sstore(dstPtr, mload(add(array, srcOffset)))\n                    dstPtr := add(dstPtr, _9)\n                    srcOffset := add(srcOffset, _2)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(array, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ add(shl(_9, newLen), _9))\n            }\n            default {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 0:78:385  \"contract Greeter {...\"\n                if newLen\n                {\n                    value := mload(add(array, srcOffset))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:78:385  \"contract Greeter {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_9, newLen)))\n            }\n            let _11 := mload(64)\n            let _12 := datasize(\"Greeter_33_deployed\")\n            codecopy(_11, dataoffset(\"Greeter_33_deployed\"), _12)\n            return(_11, _12)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n    }\n    /// @use-src 0:\"contracts/001_deploy/Greeter.sol\"\n    object \"Greeter_33_deployed\" {\n        code {\n            {\n                /// @src 0:78:385  \"contract Greeter {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0xa4136862 {\n                        if callvalue() { revert(_3, _3) }\n                        let _4 := 32\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_3, _3) }\n                        let offset := calldataload(4)\n                        let _5 := 0xffffffffffffffff\n                        if gt(offset, _5) { revert(_3, _3) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_3, _3) }\n                        let _6 := calldataload(add(4, offset))\n                        if gt(_6, _5)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _7 := not(31)\n                        finalize_allocation(_1, add(and(add(_6, 0x1f), _7), _4))\n                        mstore(_1, _6)\n                        if gt(add(add(offset, _6), 36), calldatasize()) { revert(_3, _3) }\n                        calldatacopy(add(_1, _4), add(offset, 36), _6)\n                        mstore(add(add(_1, _6), _4), _3)\n                        let newLen := mload(_1)\n                        if gt(newLen, _5)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _8 := extract_byte_array_length(sload(_3))\n                        if gt(_8, 0x1f)\n                        {\n                            mstore(_3, _3)\n                            let _9 := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let deleteStart := add(_9, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _4) { deleteStart := _9 }\n                            let _10 := add(_9, shr(5, add(_8, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _10) { start := add(start, 1) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _4\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, _7)\n                            mstore(_3, _3)\n                            let dstPtr := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := _3\n                            for { } lt(i, loopEnd) { i := add(i, _4) }\n                            {\n                                sstore(dstPtr, mload(add(_1, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, _4)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_1, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(_3, add(shl(1, newLen), 1))\n                        }\n                        default {\n                            let value := _3\n                            if newLen\n                            {\n                                value := mload(add(_1, srcOffset))\n                            }\n                            sstore(_3, or(and(value, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                        }\n                        return(mload(_2), _3)\n                    }\n                    case 0xcfae3217 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let memPtr := mload(_2)\n                        let ret := _3\n                        let slotValue := sload(_3)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let _11 := 0x20\n                        let _12 := 1\n                        switch and(slotValue, _12)\n                        case 0 {\n                            mstore(add(memPtr, _11), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _11)\n                        }\n                        case 1 {\n                            mstore(_3, _3)\n                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i_1 := _3\n                            for { } lt(i_1, length) { i_1 := add(i_1, _11) }\n                            {\n                                mstore(add(add(memPtr, i_1), _11), sload(dataPos))\n                                dataPos := add(dataPos, _12)\n                            }\n                            ret := add(add(memPtr, i_1), _11)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos := mload(_2)\n                        mstore(memPos, _11)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _11), length_1)\n                        let i_2 := _3\n                        for { } lt(i_2, length_1) { i_2 := add(i_2, _11) }\n                        {\n                            mstore(add(add(memPos, i_2), _2), mload(add(add(memPtr, i_2), _11)))\n                        }\n                        mstore(add(add(memPos, length_1), _2), _3)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), _2))\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212204b6a343d47cf6f5a0d60d9a8db1942219f9d4a3b85cbc04da1ce5d007fd8782764736f6c63430008100033\"\n    }\n}\n","hash":"010000830a98dfe3fcbe72e5a6734d23f8fab2b3aea7b27210ebe24a296ea5a9","factoryDependencies":{}}}}}}