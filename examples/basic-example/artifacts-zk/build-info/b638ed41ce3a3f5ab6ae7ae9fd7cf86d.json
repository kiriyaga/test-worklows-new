{"id":"b638ed41ce3a3f5ab6ae7ae9fd7cf86d","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16-1.0.0","input":{"language":"Solidity","sources":{"contracts/002_factory/Foo.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\ncontract Foo {\n    string public name = \"Foo\";\n}\n"}},"settings":{"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.16","long_version":"0.8.16+commit.1aa01404.Linux.g++","zk_version":"1.3.19","sources":{"contracts/002_factory/Foo.sol":{"id":0,"ast":{"absolutePath":"contracts/002_factory/Foo.sol","exportedSymbols":{"Foo":[6]},"id":7,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:0"},{"id":2,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"57:19:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Foo","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6,"linearizedBaseContracts":[6],"name":"Foo","nameLocation":"87:3:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"06fdde03","id":5,"mutability":"mutable","name":"name","nameLocation":"111:4:0","nodeType":"VariableDeclaration","scope":6,"src":"97:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3,"name":"string","nodeType":"ElementaryTypeName","src":"97:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"466f6f","id":4,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"118:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_b608c74283f334e1f047dbbf1daa2407d41d4689aca67c422796f936acce16b7","typeString":"literal_string \"Foo\""},"value":"Foo"},"visibility":"public"}],"scope":7,"src":"78:48:0","usedErrors":[]}],"src":"33:94:0"}}},"contracts":{"contracts/002_factory/Foo.sol":{"Foo":{"abi":[{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.1aa01404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/002_factory/Foo.sol\":\"Foo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/002_factory/Foo.sol\":{\"keccak256\":\"0x36316bab529ebbd9ca2a14aa9046b26cbd5dc2027d1064e20adeacc35f893234\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c95c96d801cd6677224f4879614ab0f168cd574f48d245771db4fc1ba6fa45bf\",\"dweb:/ipfs/QmPsfWnMG4NeDkD2zAixT5ctZcVMPF2o4BxzuAn37zBaDi\"]}},\"version\":1}","zk_version":"1.3.19"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Foo.sol:Foo\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\tr1, r0, r2\n\tand!\t@CPI0_4[0], r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tand\t@CPI0_5[0], r1, r1\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand!\t1, r1, r3\n\tshr.s\t1, r1, r4\n\tand\t127, r4, r2\n\tadd.ne\tr4, r0, r2\n\tsub.s!\t31, r2, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\txor\tr1, r4, r4\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_4\n\tst.1\t128, r2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_19\n\tsub.s\t256, r0, r3\n\tand\tr1, r3, r1\n\tst.1\t160, r1\n\tsub!\tr2, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n\tjump\t@.BB0_17\n.BB0_1:\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_6\n.BB0_4:\n\tadd\t@CPI0_10[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n.BB0_5:\n\tst.1\t4, r1\n\tadd\t@CPI0_11[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_6:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_10\n\tadd\tr3, r0, stack-[1]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[1], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tsub!\tr1, r2, r3\n\tjump.ge\t@.BB0_10\n.BB0_11:\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_11\n.BB0_10:\n\tadd\t@CPI0_2[0], r0, r1\n\tsstore\tr0, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_3[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_19:\n\tadd\t160, r0, r1\n\tst.1\t0, r0\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_24\n\tadd\t@CPI0_7[0], r0, r1\n\tadd\tr0, r0, r4\n.BB0_21:\n\tadd\tr4, r0, r3\n\tsload\tr1, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_21\n\tadd\t192, r3, r1\n.BB0_17:\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t@CPI0_8[0], r1, r2\n\tsub.s!\t@CPI0_9[0], r2, r2\n\tjump.ge\t@.BB0_24\n\tadd\t@CPI0_10[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tjump\t@.BB0_5\n.BB0_24:\n\tst.1\t64, r1\n\tadd\t32, r0, r2\n\tst.1.inc\tr1, r2, r3\n\tld.1\t128, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r3\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB0_27\n\tadd\tr0, r0, r4\n.BB0_26:\n\tadd\tr4, r3, r5\n\tadd\t160, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_26\n.BB0_27:\n\tadd\tr2, r3, r3\n\tst.1\tr3, r0\n\tadd\t95, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__staticcall:\n.func_begin1:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_2:\n\t.cell 31858785518863541599296842493796276508710584217660196346798304455696068902918\nCPI0_3:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_4:\n\t.cell 340282366604025813406317257057592410112\nCPI0_5:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_6:\n\t.cell 3162421667457357072237249128631551985524704858613737409516517017801010970624\nCPI0_7:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_8:\n\t.cell -18446744073709551616\nCPI0_9:\n\t.cell -18446744073709551488\nCPI0_10:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_11:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":"00010000000000020000000102200190000000220000c13d00000000020100190000002b02200198000000580000613d000000000101043b0000002c011001970000002d0110009c000000580000c13d0000000001000416000000000101004b000000580000c13d000000000100041a000000010310019000000001041002700000007f0240018f000000000204c0190000001f0420008c00000000040000190000000104002039000000000441013f0000000104400190000000320000c13d000000800020043f000000000303004b0000005a0000c13d000001000300008a000000000131016f000000a00010043f000000000102004b000000c001000039000000a001006039000000690000013d0000008001000039000000400010043f0000000001000416000000000101004b000000580000c13d000000000100041a000000010210019000000001011002700000007f0310018f000000000301c0190000001f0130008c00000000010000190000000101002039000000010110018f000000000112004b000000380000613d000000310100004100000000001004350000002201000039000000040010043f00000032010000410000009800010430000000200130008c000000510000413d000100000003001d000000000000043500000027010000410000000002000414000000270320009c0000000002018019000000c00120021000000028011001c70000801002000039009600910000040f0000000102200190000000580000613d000000000101043b00000001020000290000001f0220003900000005022002700000000002210019000000000321004b000000510000813d000000000001041b0000000101100039000000000321004b0000004d0000413d0000002901000041000000000010041b0000002001000039000001000010044300000120000004430000002a01000041000000970001042e00000000010000190000009800010430000000a0010000390000000000000435000000000302004b000000730000613d0000002e0100004100000000040000190000000003040019000000000401041a000000a005300039000000000045043500000001011000390000002004300039000000000524004b000000600000413d000000c0013000390000001f01100039000000200200008a000000000121016f0000002f02100041000000300220009c000000730000813d000000310100004100000000001004350000004101000039000000350000013d000000400010043f00000020020000390000000003210436000000800200043d00000000002304350000004003100039000000000402004b000000830000613d00000000040000190000000005340019000000a006400039000000000606043300000000006504350000002004400039000000000524004b0000007c0000413d000000000332001900000000000304350000005f02200039000000200300008a000000000232016f0000002703000041000000270420009c0000000002038019000000270410009c000000000103801900000040011002100000006002200210000000000112019f000000970001042e00000094002104230000000102000039000000000001042d0000000002000019000000000001042d0000009600000432000000970001042e000000980001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0200000000000000000000000000000000000020000000000000000000000000466f6f0000000000000000000000000000000000000000000000000000000006000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000fffffffc000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000006fdde0300000000000000000000000000000000000000000000000000000000290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563ffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff00000000000000804e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f72ba4653fbfc43d03fcf69af41031852cdf75a9a0ad003468beb7815ce331c"},"methodIdentifiers":{"name()":"06fdde03"}},"irOptimized":"/// @use-src 0:\"contracts/002_factory/Foo.sol\"\nobject \"Foo_6\" {\n    code {\n        {\n            /// @src 0:78:126  \"contract Foo {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            /// @src 0:118:123  \"\\\"Foo\\\"\"\n            let _2 := 0x00\n            /// @src 0:78:126  \"contract Foo {...\"\n            let _3 := sload(/** @src 0:118:123  \"\\\"Foo\\\"\" */ _2)\n            /// @src 0:78:126  \"contract Foo {...\"\n            let length := /** @src 0:118:123  \"\\\"Foo\\\"\" */ _2\n            /// @src 0:78:126  \"contract Foo {...\"\n            let _4 := 1\n            length := shr(_4, _3)\n            let outOfPlaceEncoding := and(_3, _4)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(/** @src 0:118:123  \"\\\"Foo\\\"\" */ _2, /** @src 0:78:126  \"contract Foo {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src 0:118:123  \"\\\"Foo\\\"\" */ _2, /** @src 0:78:126  \"contract Foo {...\" */ 0x24)\n            }\n            if gt(length, 31)\n            {\n                mstore(/** @src 0:118:123  \"\\\"Foo\\\"\" */ _2, _2)\n                /// @src 0:78:126  \"contract Foo {...\"\n                let data := keccak256(/** @src 0:118:123  \"\\\"Foo\\\"\" */ _2, /** @src 0:78:126  \"contract Foo {...\" */ 32)\n                let _5 := add(data, shr(5, add(length, 31)))\n                let start := data\n                for { } lt(start, _5) { start := add(start, _4) }\n                {\n                    sstore(start, /** @src 0:118:123  \"\\\"Foo\\\"\" */ _2)\n                }\n            }\n            /// @src 0:78:126  \"contract Foo {...\"\n            sstore(/** @src 0:118:123  \"\\\"Foo\\\"\" */ _2, /** @src 0:78:126  \"contract Foo {...\" */ add(\"Foo\", 6))\n            let _6 := datasize(\"Foo_6_deployed\")\n            codecopy(_1, dataoffset(\"Foo_6_deployed\"), _6)\n            return(_1, _6)\n        }\n    }\n    /// @use-src 0:\"contracts/002_factory/Foo.sol\"\n    object \"Foo_6_deployed\" {\n        code {\n            {\n                /// @src 0:78:126  \"contract Foo {...\"\n                let _1 := memoryguard(0x80)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    if eq(0x06fdde03, shr(224, calldataload(_2)))\n                    {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let ret := _2\n                        let slotValue := sload(_2)\n                        let length := _2\n                        let _3 := 1\n                        length := shr(_3, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, _3)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _4 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _4))\n                        {\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(_2, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, _4), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), _4)\n                        }\n                        case 1 {\n                            mstore(_2, _2)\n                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := _2\n                            for { } lt(i, length) { i := add(i, _4) }\n                            {\n                                mstore(add(add(_1, i), _4), sload(dataPos))\n                                dataPos := add(dataPos, _3)\n                            }\n                            ret := add(add(_1, i), _4)\n                        }\n                        let _5 := not(31)\n                        let newFreePtr := add(_1, and(add(sub(ret, _1), 31), _5))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                        {\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_2, 0x24)\n                        }\n                        let _6 := 64\n                        mstore(_6, newFreePtr)\n                        mstore(newFreePtr, _4)\n                        let length_1 := mload(_1)\n                        mstore(add(newFreePtr, _4), length_1)\n                        let i_1 := _2\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, _4) }\n                        {\n                            mstore(add(add(newFreePtr, i_1), _6), mload(add(add(_1, i_1), _4)))\n                        }\n                        mstore(add(add(newFreePtr, length_1), _6), _2)\n                        return(newFreePtr, add(sub(add(newFreePtr, and(add(length_1, 31), _5)), newFreePtr), _6))\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220433626888a88d8c618626b28e7e3f6f5e8fc19a220b251b5ff953237ff4aa93c64736f6c63430008100033\"\n    }\n}\n","hash":"01000035991695c142799bf1f49b1d86552f14a9c138d3fb04e8ccbd2d13891d","factoryDependencies":{}}}}}}