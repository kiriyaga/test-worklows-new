{"id":"c62cb752815f9065d900d2c4d3af9aea","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"contracts/Greeter.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Greeter {\n\n    string greeting;\n    string bad;\n    constructor(string memory _greeting) {\n        greeting = _greeting;\n        bad = \"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad\";\n    }\n\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n}\n"}},"settings":{"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.17","long_version":"0.8.17+commit.8df45f5f.Linux.g++","zk_version":"1.3.18","sources":{"contracts/Greeter.sol":{"id":0,"ast":{"absolutePath":"contracts/Greeter.sol","exportedSymbols":{"Greeter":[28]},"id":29,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.4",".22","<","0.9",".0"],"nodeType":"PragmaDirective","src":"33:32:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Greeter","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":28,"linearizedBaseContracts":[28],"name":"Greeter","nameLocation":"76:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"greeting","nameLocation":"98:8:0","nodeType":"VariableDeclaration","scope":28,"src":"91:15:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2,"name":"string","nodeType":"ElementaryTypeName","src":"91:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5,"mutability":"mutable","name":"bad","nameLocation":"119:3:0","nodeType":"VariableDeclaration","scope":28,"src":"112:10:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":4,"name":"string","nodeType":"ElementaryTypeName","src":"112:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"body":{"id":18,"nodeType":"Block","src":"165:184:0","statements":[{"expression":{"id":12,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10,"name":"greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"175:8:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":11,"name":"_greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"186:9:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"175:20:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":13,"nodeType":"ExpressionStatement","src":"175:20:0"},{"expression":{"id":16,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":14,"name":"bad","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"205:3:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"626161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616164","id":15,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"211:131:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_928f8c2f9226551534c11cbaf5a3b451aea554a11db6c000372af3aaec2b5973","typeString":"literal_string \"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad\""},"value":"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad"},"src":"205:137:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":17,"nodeType":"ExpressionStatement","src":"205:137:0"}]},"id":19,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7,"mutability":"mutable","name":"_greeting","nameLocation":"154:9:0","nodeType":"VariableDeclaration","scope":19,"src":"140:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6,"name":"string","nodeType":"ElementaryTypeName","src":"140:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"139:25:0"},"returnParameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"165:0:0"},"scope":28,"src":"128:221:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":26,"nodeType":"Block","src":"408:32:0","statements":[{"expression":{"id":24,"name":"greeting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"425:8:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":23,"id":25,"nodeType":"Return","src":"418:15:0"}]},"functionSelector":"cfae3217","id":27,"implemented":true,"kind":"function","modifiers":[],"name":"greet","nameLocation":"364:5:0","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"369:2:0"},"returnParameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":22,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":27,"src":"393:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":21,"name":"string","nodeType":"ElementaryTypeName","src":"393:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"392:15:0"},"scope":28,"src":"355:85:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":29,"src":"67:376:0","usedErrors":[]}],"src":"33:411:0"}}},"contracts":{"contracts/Greeter.sol":{"Greeter":{"abi":[{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greet","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Greeter.sol\":\"Greeter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Greeter.sol\":{\"keccak256\":\"0x1325496f19c32b493fb12f4ec85198d3497c780d7d7616aa458245c171064215\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f1a37964811bd3fb26066eed6cb561cc089b9e6cc7016b7dae0219e2d1e2528\",\"dweb:/ipfs/QmVVmtKwrUDwL8JRio8F5e99b9Zn3NLe2g49MHaGuASq5h\"]}},\"version\":1}","zk_version":"1.3.18"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Greeter.sol:Greeter\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[5]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r1\n\tand\t@CPI0_10[0], r1, r1\n\tsub.s!\t@CPI0_11[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand!\t1, r1, r3\n\tshr.s\t1, r1, r4\n\tand\t127, r4, r2\n\tadd.ne\tr4, r0, r2\n\tsub.s!\t31, r2, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\txor\tr1, r4, r4\n\tand!\t1, r4, r4\n\tjump.eq\t@.BB0_50\n.BB0_22:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB0_5\n.BB0_1:\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_1[0], r3, r2\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_6\n.BB0_4:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB0_5:\n\tst.1\t4, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_6:\n\tadd\t159, r3, r2\n\tand\t@CPI0_3[0], r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_61\n\tadd\tr0, r0, r5\n.BB0_8:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_8\n.BB0_61:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_10\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_10:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_2\n\tld.1\t128, r4\n\tsub.s!\t@CPI0_4[0], r4, r1\n\tjump.gt\t@.BB0_2\n\tadd\t128, r3, r3\n\tadd\t159, r4, r1\n\tsub!\tr1, r3, r1\n\tjump.ge\t@.BB0_2\n\tadd\t128, r4, r2\n\tld.1\tr2, r1\n\tsub.s!\t@CPI0_4[0], r1, r5\n\tjump.gt\t@.BB0_4\n\tadd\t63, r1, r5\n\tsub.s\t32, r0, r9\n\tand\tr5, r9, r5\n\tld.1\t64, r8\n\tadd\tr8, r5, r5\n\tsub!\tr5, r8, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_4[0], r5, r7\n\tjump.gt\t@.BB0_4\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r5\n\tst.1.inc\tr8, r1, r6\n\tadd\tr4, r1, r4\n\tadd\t160, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.le\t@.BB0_17\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_50:\n\tst.1\t128, r2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_53\n\tsub.s\t256, r0, r3\n\tand\tr1, r3, r1\n\tst.1\t160, r1\n\tsub!\tr2, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n\tjump\t@.BB0_51\n.BB0_53:\n\tadd\t160, r0, r1\n\tst.1\t0, r0\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_57\n\tadd\t@CPI0_12[0], r0, r1\n\tadd\tr0, r0, r4\n.BB0_55:\n\tadd\tr4, r0, r3\n\tsload\tr1, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_55\n\tadd\t192, r3, r1\n.BB0_51:\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t@CPI0_13[0], r1, r2\n\tsub.s!\t@CPI0_14[0], r2, r2\n\tjump.lt\t@.BB0_4\n.BB0_57:\n\tst.1\t64, r1\n\tadd\t32, r0, r2\n\tst.1.inc\tr1, r2, r3\n\tld.1\t128, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r3\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB0_60\n\tadd\tr0, r0, r4\n.BB0_59:\n\tadd\tr4, r3, r5\n\tadd\t160, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_59\n.BB0_60:\n\tadd\tr2, r3, r3\n\tst.1\tr3, r0\n\tadd\t95, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_17:\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_20\n\tadd\tr0, r0, r3\n.BB0_19:\n\tadd\tr3, r6, r4\n\tadd\t32, r3, r3\n\tadd\tr3, r2, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_19\n.BB0_20:\n\tadd\tr6, r1, r1\n\tst.1\tr1, r0\n\tld.1\tr8, r4\n\tsub.s!\t@CPI0_4[0], r4, r1\n\tjump.gt\t@.BB0_4\n\tsload\tr0, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_22\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_27\n\tadd\tr3, r0, stack-[1]\n\tadd\tr4, r0, stack-[3]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr8, r0, stack-[5]\n\tadd\tr9, r0, stack-[4]\n\tadd\tr6, r0, stack-[2]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r6\n\tadd\tstack-[4], r0, r9\n\tadd\tstack-[5], r0, r8\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r4\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r4, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_27\n.BB0_28:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_28\n.BB0_27:\n\tsub.s!\t31, r4, r1\n\tjump.le\t@.BB0_38\n\tadd\tr4, r0, stack-[3]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr8, r0, stack-[5]\n\tadd\tr9, r0, stack-[4]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r3\n\tadd\tstack-[5], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r7\n\tand!\tr7, r3, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tjump.eq\t@.BB0_35\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_34:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_34\n.BB0_35:\n\tsub!\tr3, r7, r3\n\tjump.ge\t@.BB0_37\n\tshl.s\t3, r7, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r6, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_37:\n\tshl.s\t1, r7, r1\n\tor\t1, r1, r1\n\tjump\t@.BB0_29\n.BB0_38:\n\tsub!\tr4, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_40\n\tld.1\tr6, r1\n.BB0_40:\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n\tor\tr1, r2, r1\n.BB0_29:\n\tsstore\tr0, r1\n\tadd\t1, r0, r4\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_22\n\tadd\tr3, r0, stack-[5]\n\tsub.s!\t31, r3, r1\n\tjump.le\t@.BB0_45\n\tadd\tr4, r0, stack-[4]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r2\n\tadd\tstack-[5], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr2, r1, r1\n\tadd\t5, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[4], r0, r4\n\tjump.ge\t@.BB0_45\n.BB0_44:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_44\n.BB0_45:\n\tadd\t259, r0, r1\n\tsstore\tr4, r1\n\tst.1\t0, r4\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[5]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\t@CPI0_6[0], r0, r2\n\tsstore\tr1, r2\n\tadd\t1, r1, r2\n\tadd\t@CPI0_7[0], r0, r3\n\tsstore\tr2, r3\n\tadd\t2, r1, r2\n\tsstore\tr2, r3\n\tadd\t3, r1, r2\n\tsstore\tr2, r3\n\tadd\t4, r1, r1\n\tadd\t@CPI0_8[0], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[5], r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_9[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__sha3:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI1_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI1_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__staticcall:\n.func_begin2:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell -18446744073709551457\nCPI0_2:\n\t.cell -18446744073709551489\nCPI0_3:\n\t.cell 8589934560\nCPI0_4:\n\t.cell 18446744073709551615\nCPI0_5:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_6:\n\t.cell 44498715421209427000476796888985195225413359456294804382013976868972375662945\nCPI0_7:\n\t.cell 44046402572626160612103472728795008085361523578694645928734845681441465000289\nCPI0_8:\n\t.cell 45231284858326638837332416019018714005183587760015845327913118753091066265600\nCPI0_9:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_10:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_11:\n\t.cell -21855552483912501284291303069055441188061847755248476274203343518395480932352\nCPI0_12:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_13:\n\t.cell -18446744073709551616\nCPI0_14:\n\t.cell -18446744073709551488\nCPI0_15:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_16:\n\t.cell 2852213850513516153367582212096\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":"000500000000000200000000030100190000006003300270000000600330019700000001022001900000001e0000c13d000000040230008c000000690000413d000000000101043b0000006a011001970000006b0110009c000000690000c13d0000000001000416000000000101004b000000690000c13d000000000100041a000000010310019000000001041002700000007f0240018f000000000204c0190000001f0420008c00000000040000190000000104002039000000000441013f00000001044001900000006b0000613d0000006f0100004100000000001004350000002201000039000000290000013d0000008002000039000000400020043f0000000002000416000000000202004b000000690000c13d0000006102300041000000620220009c0000002c0000213d0000006f0100004100000000001004350000004101000039000000040010043f00000070010000410000017b000104300000009f023000390000006302200197000000400020043f0000001f0230018f00000005043002720000003b0000613d00000000050000190000000506500210000000000761034f000000000707043b000000800660003900000000007604350000000105500039000000000645004b000000330000413d000000000502004b0000004a0000613d0000000504400210000000000141034f00000003022002100000008004400039000000000504043300000000052501cf000000000525022f000000000101043b0000010002200089000000000121022f00000000012101cf000000000151019f0000000000140435000000200130008c000000690000413d000000800400043d000000640140009c000000690000213d00000080033000390000009f01400039000000000131004b000000690000813d00000080024000390000000001020433000000640510009c000000260000213d0000003f05100039000000200900008a000000000595016f000000400800043d0000000005580019000000000685004b00000000060000190000000106004039000000640750009c000000260000213d0000000106600190000000260000c13d000000400050043f00000000061804360000000004140019000000a004400039000000000334004b000000a80000a13d00000000010000190000017b00010430000000800020043f000000000303004b000000750000c13d000001000300008a000000000131016f000000a00010043f000000000102004b000000c001000039000000a001006039000000840000013d000000a0010000390000000000000435000000000302004b0000008a0000613d0000006c0100004100000000040000190000000003040019000000000401041a000000a005300039000000000045043500000001011000390000002004300039000000000524004b0000007b0000413d000000c0013000390000001f01100039000000200200008a000000000121016f0000006d021000410000006e0220009c000000260000413d000000400010043f00000020020000390000000003210436000000800200043d00000000002304350000004003100039000000000402004b0000009a0000613d00000000040000190000000005340019000000a006400039000000000606043300000000006504350000002004400039000000000524004b000000930000413d000000000332001900000000000304350000005f02200039000000200300008a000000000232016f0000006003000041000000600420009c0000000002038019000000600410009c000000000103801900000040011002100000006002200210000000000112019f0000017a0001042e000000000301004b000000b20000613d000000000300001900000000046300190000002003300039000000000523001900000000050504330000000000540435000000000413004b000000ab0000413d000000000116001900000000000104350000000004080433000000640140009c000000260000213d000000000100041a000000010210019000000001011002700000007f0310018f000000000301c0190000001f0130008c00000000010000190000000101002039000000010110018f000000000112004b0000001a0000c13d000000200130008c000000e80000413d000100000003001d000300000004001d000000000000043500000060010000410000000002000414000000600320009c0000000002018019000000c00120021000000065011001c70000801002000039000500000008001d000400000009001d000200000006001d017901740000040f0000000206000029000000040900002900000005080000290000000102200190000000690000613d00000003040000290000001f024000390000000502200270000000200340008c0000000002004019000000000301043b00000001010000290000001f01100039000000050110027000000000011300190000000002230019000000000312004b000000e80000813d000000000002041b0000000102200039000000000312004b000000e40000413d0000001f0140008c000001170000a13d000300000004001d000000000000043500000060010000410000000002000414000000600320009c0000000002018019000000c00120021000000065011001c70000801002000039000500000008001d000400000009001d017901740000040f000000040300002900000005060000290000000102200190000000690000613d000000030700002900000000033701700000002002000039000000000101043b000001090000613d0000002002000039000000000400001900000000056200190000000005050433000000000051041b000000200220003900000001011000390000002004400039000000000534004b000001010000413d000000000373004b000001140000813d0000000303700210000000f80330018f000000010400008a000000000334022f000000000343013f00000000026200190000000002020433000000000232016f000000000021041b000000010170021000000001011001bf000001220000013d000000000104004b00000000010000190000011b0000613d00000000010604330000000302400210000000010300008a000000000223022f000000000232013f000000000121016f0000000102400210000000000121019f000000000010041b0000000104000039000000000104041a000000010210019000000001021002700000007f0320018f000000000302c0190000001f0230008c00000000020000190000000102002039000000000121013f00000001011001900000001a0000c13d000500000003001d0000001f0130008c0000014b0000a13d000400000004001d000000000040043500000060010000410000000002000414000000600320009c0000000002018019000000c00120021000000065011001c70000801002000039017901740000040f0000000102200190000000690000613d000000000201043b00000005010000290000001f01100039000000050110027000000000011200190000000502200039000000000312004b00000004040000290000014b0000813d000000000002041b0000000102200039000000000312004b000001470000413d0000010301000039000000000014041b00000000004004350000002001000039000500000001001d017901620000040f0000006602000041000000000021041b00000001021000390000006703000041000000000032041b0000000202100039000000000032041b0000000302100039000000000032041b00000004011000390000006802000041000000000021041b00000005010000290000010000100443000001200000044300000069010000410000017a0001042e00000060020000410000000003000414000000600430009c0000000003028019000000600410009c00000000010280190000006001100210000000c002300210000000000112019f00000071011001c70000801002000039017901740000040f0000000102200190000001720000613d000000000101043b000000000001042d00000000010000190000017b0001043000000177002104230000000102000039000000000001042d0000000002000019000000000001042d00000179000004320000017a0001042e0000017b00010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000009fffffffffffffffffffffffffffffffffffffffffffffffff000000000000007f00000000000000000000000000000000000000000000000000000001ffffffe0000000000000000000000000000000000000000000000000ffffffffffffffff02000000000000000000000000000000000000200000000000000000000000006261616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616164000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000040000001000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000cfae321700000000000000000000000000000000000000000000000000000000290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563ffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff00000000000000804e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000002000000000000000000000000000000000000000000000000000000000000007469d11c99968b6fe61dc59a3e6bde9c9386ba104978fdd75077cad0077999ad"},"methodIdentifiers":{"greet()":"cfae3217"}},"irOptimized":"/// @use-src 0:\"contracts/Greeter.sol\"\nobject \"Greeter_28\" {\n    code {\n        {\n            /// @src 0:67:443  \"contract Greeter {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"Greeter_28\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            let _2 := 32\n            if slt(sub(_1, memoryDataOffset), _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:67:443  \"contract Greeter {...\"\n            let offset := mload(memoryDataOffset)\n            let _3 := sub(shl(64, 1), 1)\n            if gt(offset, _3)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:67:443  \"contract Greeter {...\"\n            let _4 := add(memoryDataOffset, offset)\n            let _5 := 0x1f\n            if iszero(slt(add(_4, _5), _1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:67:443  \"contract Greeter {...\"\n            let _6 := mload(_4)\n            if gt(_6, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ 0x24)\n            }\n            let _7 := not(31)\n            let array := allocate_memory(add(and(add(_6, _5), _7), _2))\n            mstore(array, _6)\n            if gt(add(add(_4, _6), _2), _1)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:67:443  \"contract Greeter {...\"\n            let i := /** @src -1:-1:-1 */ 0\n            /// @src 0:67:443  \"contract Greeter {...\"\n            for { } lt(i, _6) { i := add(i, _2) }\n            {\n                mstore(add(add(array, i), _2), mload(add(add(_4, i), _2)))\n            }\n            mstore(add(add(array, _6), _2), /** @src -1:-1:-1 */ 0)\n            /// @src 0:67:443  \"contract Greeter {...\"\n            let newLen := mload(array)\n            if gt(newLen, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ 0x24)\n            }\n            let _8 := extract_byte_array_length(sload(/** @src -1:-1:-1 */ 0))\n            /// @src 0:67:443  \"contract Greeter {...\"\n            if gt(_8, _5)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 0:67:443  \"contract Greeter {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ _2)\n                let deleteStart := add(data, shr(5, add(newLen, _5)))\n                if lt(newLen, _2) { deleteStart := data }\n                clear_storage_range_bytes1(deleteStart, add(data, shr(5, add(_8, _5))))\n            }\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 0:67:443  \"contract Greeter {...\"\n            srcOffset := _2\n            switch gt(newLen, _5)\n            case 1 {\n                let loopEnd := and(newLen, _7)\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 0:67:443  \"contract Greeter {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ _2)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 0:67:443  \"contract Greeter {...\"\n                for { } lt(i_1, loopEnd) { i_1 := add(i_1, _2) }\n                {\n                    sstore(dstPtr, mload(add(array, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, _2)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(array, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 0:67:443  \"contract Greeter {...\"\n                if newLen\n                {\n                    value := mload(add(array, srcOffset))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n            }\n            let _9 := extract_byte_array_length(sload(/** @src 0:205:342  \"bad = \\\"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad\\\"\" */ 0x01))\n            /// @src 0:67:443  \"contract Greeter {...\"\n            if gt(_9, _5)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:205:342  \"bad = \\\"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad\\\"\" */ 0x01)\n                /// @src 0:67:443  \"contract Greeter {...\"\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ _2)\n                clear_storage_range_bytes1(add(data_1, 5), add(data_1, shr(5, add(_9, _5))))\n            }\n            sstore(/** @src 0:205:342  \"bad = \\\"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad\\\"\" */ 0x01, /** @src 0:67:443  \"contract Greeter {...\" */ 259)\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:205:342  \"bad = \\\"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad\\\"\" */ 0x01)\n            /// @src 0:67:443  \"contract Greeter {...\"\n            let data_2 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:67:443  \"contract Greeter {...\" */ _2)\n            sstore(data_2, \"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n            let _10 := \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n            sstore(add(data_2, /** @src 0:205:342  \"bad = \\\"baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad\\\"\" */ 0x01), /** @src 0:67:443  \"contract Greeter {...\" */ _10)\n            sstore(add(data_2, 2), _10)\n            sstore(add(data_2, 3), _10)\n            sstore(add(data_2, 4), \"d\")\n            let _11 := mload(64)\n            let _12 := datasize(\"Greeter_28_deployed\")\n            codecopy(_11, dataoffset(\"Greeter_28_deployed\"), _12)\n            return(_11, _12)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function clear_storage_range_bytes1(start, end)\n        {\n            for { } lt(start, end) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    /// @use-src 0:\"contracts/Greeter.sol\"\n    object \"Greeter_28_deployed\" {\n        code {\n            {\n                /// @src 0:67:443  \"contract Greeter {...\"\n                let _1 := memoryguard(0x80)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    if eq(0xcfae3217, shr(224, calldataload(_2)))\n                    {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let ret := _2\n                        let slotValue := sload(_2)\n                        let length := _2\n                        let _3 := 1\n                        length := shr(_3, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, _3)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _4 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _4))\n                        {\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(_2, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, _4), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), _4)\n                        }\n                        case 1 {\n                            mstore(_2, _2)\n                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := _2\n                            for { } lt(i, length) { i := add(i, _4) }\n                            {\n                                mstore(add(add(_1, i), _4), sload(dataPos))\n                                dataPos := add(dataPos, _3)\n                            }\n                            ret := add(add(_1, i), _4)\n                        }\n                        let _5 := not(31)\n                        let newFreePtr := add(_1, and(add(sub(ret, _1), 31), _5))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                        {\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_2, 0x24)\n                        }\n                        let _6 := 64\n                        mstore(_6, newFreePtr)\n                        mstore(newFreePtr, _4)\n                        let length_1 := mload(_1)\n                        mstore(add(newFreePtr, _4), length_1)\n                        let i_1 := _2\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, _4) }\n                        {\n                            mstore(add(add(newFreePtr, i_1), _6), mload(add(add(_1, i_1), _4)))\n                        }\n                        mstore(add(add(newFreePtr, length_1), _6), _2)\n                        return(newFreePtr, add(sub(add(newFreePtr, and(add(length_1, 31), _5)), newFreePtr), _6))\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ee52e0c36b17cf335e629045b91fc4a78b8f5f76b5faeba5d8199cc4cf9b486b64736f6c63430008110033\"\n    }\n}\n","hash":"01000073a95ecb0c8160921a16a79ce12f5850eb9d5873477119fcff4b870567","factoryDependencies":{}}}}}}